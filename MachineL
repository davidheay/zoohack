import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Conv2D, Flatten, Dropout, MaxPooling2D
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.python.keras import backend as K
from tensorflow.python.keras import optimizers

import os
import numpy as np
import matplotlib.pyplot as plt

K.clear_session()

data_entrenamiento = './data/train'
data_validacion = './data/validacion2'

batch_size = 32
epochs = 8
IMG_HEIGHT = 150
IMG_WIDTH = 150
clases = 12

train_image_generator = ImageDataGenerator(rescale=1./255,
                                           shear_range = 0.3,
                                           zoom_range = 0.5,
                                           horizontal_flip = True,
                                           rotation_range=45,
                                           width_shift_range=.15,
                                           height_shift_range=.15) # Generator for our training data

validation_image_generator = ImageDataGenerator(rescale=1./255) # Generator for our validation data

train_data_gen = train_image_generator.flow_from_directory(
    data_entrenamiento,
    batch_size=batch_size,
    shuffle=True,
    target_size=(IMG_HEIGHT, IMG_WIDTH),
    class_mode = 'categorical')

val_data_gen = validation_image_generator.flow_from_directory(
    data_validacion,
    batch_size=batch_size,
    target_size=(IMG_HEIGHT, IMG_WIDTH),
    class_mode = 'categorical')

sample_training_images, _ = next(train_data_gen)

def plotImages(images_arr):
    fig, axes = plt.subplots(1, 5, figsize=(20,20))
    axes = axes.flatten()
    for img, ax in zip( images_arr, axes):
        ax.imshow(img)
        ax.axis('off')
    plt.tight_layout()
    plt.show()

#plotImages(sample_training_images[:5])

model = Sequential([
    Conv2D(16, 3, padding='same', activation='relu', input_shape=(IMG_HEIGHT, IMG_WIDTH ,3)),
    MaxPooling2D(pool_size = (2,2)),
    Conv2D(32, 3, padding='same', activation='relu'),
    MaxPooling2D(pool_size = (2,2)),
    Conv2D(64, 3, padding='same', activation='relu'),
    MaxPooling2D(pool_size = (2,2)),
    Flatten(),
    Dense(256, activation='relu'),
    Dropout(0.5),
    Dense(clases, activation='softmax')
])

model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

model.summary()

history = model.fit_generator(
    train_data_gen,
    steps_per_epoch=2000,
    epochs=epochs,
    validation_data=val_data_gen,
    validation_steps=1000
)

target_dir = './modelo/'
if not os.path.exists(target_dir):
  os.mkdir(target_dir)
model.save('./modelo/modelo1.h5')
model.save_weights('./modelo/pesos1.h5')

acc = history.history['accuracy']
val_acc = history.history['val_accuracy']

loss = history.history['loss']
val_loss = history.history['val_loss']

epochs_range = range(epochs)

plt.figure(figsize=(8, 8))
plt.subplot(1, 2, 1)
plt.plot(epochs_range, acc, label='Training Accuracy')
plt.plot(epochs_range, val_acc, label='Validation Accuracy')
plt.legend(loc='lower right')
plt.title('Training and Validation Accuracy')

plt.subplot(1, 2, 2)
plt.plot(epochs_range, loss, label='Training Loss')
plt.plot(epochs_range, val_loss, label='Validation Loss')
plt.legend(loc='upper right')
plt.title('Training and Validation Loss')
plt.show()

